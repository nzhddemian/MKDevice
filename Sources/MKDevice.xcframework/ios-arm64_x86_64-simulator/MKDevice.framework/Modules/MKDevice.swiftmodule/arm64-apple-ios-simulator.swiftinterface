// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MKDevice
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Accelerate
import CoreImage.CIFilterBuiltins
import Combine
import CoreImage
import Foundation
import MetalKit
import ModelIO
import SceneKit
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import Vision
import _Concurrency
import _StringProcessing
import simd
public struct PPState {
}
public struct Buffer {
}
public struct UBuffer : Swift.Equatable {
  public var pos: simd.float2
  public var pmouse: simd.float2
  public var scale: simd.float2
  public var rotation: Swift.Float
  public var intensity: Swift.Float
  public var topPos: Swift.Float
  public var bottomPos: Swift.Float
  public var leftPos: Swift.Float
  public var rightPos: Swift.Float
  public var res: simd.float2
  public var viewRes: simd.float2
  public var smoothness: Swift.Float
  public var selected: Swift.Bool
  public var deviceScale: Swift.Float
  public var isHorisontal: Swift.Bool
  public static func == (a: MKDevice.UBuffer, b: MKDevice.UBuffer) -> Swift.Bool
}
extension Swift.SIMD2 where Scalar == Swift.Float {
  public func convertToPosCoord() -> simd.float2
}
extension Swift.SIMD2 where Scalar == Swift.Float {
  public func convertToTexCoord() -> simd.float2
}
extension Metal.MTLRenderCommandEncoder {
  public func setVertexValue<T>(_ value: T, at index: Swift.Int)
  public func setVertexValue<T>(_ value: [T], at index: Swift.Int)
  public func setFragmentValue<T>(_ value: T, at index: Swift.Int)
  public func setFragmentValue<T>(_ value: [T], at index: Swift.Int)
  public func setVertexTextures(_ textures: [Metal.MTLTexture?], startingAt startIndex: Swift.Int = 0)
  public func setVertexTextures(_ textures: Metal.MTLTexture?..., startingAt startIndex: Swift.Int = 0)
  public func setFragmentTextures(_ textures: [Metal.MTLTexture?], startingAt startIndex: Swift.Int = 0)
}
extension UIKit.UIColor {
  public static let green_l: UIKit.UIColor
  public static let green_d: UIKit.UIColor
}
extension UIKit.UIColor {
  public var r: Swift.Double {
    get
  }
  public var g: Swift.Double {
    get
  }
  public var b: Swift.Double {
    get
  }
  public var a: Swift.Double {
    get
  }
}
extension Metal.MTLTexture {
  public var cgImage: CoreGraphics.CGImage? {
    get
  }
}
extension Metal.MTLTexture {
  public var size: CoreFoundation.CGSize {
    get
  }
}
public enum ReshapeToolType : Swift.String, Swift.CaseIterable {
  case slim, tall, head, waist, hips, move, shrink, grow
  public init?(rawValue: Swift.String)
  public typealias AllCases = [MKDevice.ReshapeToolType]
  public typealias RawValue = Swift.String
  public static var allCases: [MKDevice.ReshapeToolType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum RetouchToolType : Swift.String, Swift.CaseIterable {
  case smooth, spot_heal, dark_circle, details, eye_color, whiten
  public init?(rawValue: Swift.String)
  public typealias AllCases = [MKDevice.RetouchToolType]
  public typealias RawValue = Swift.String
  public static var allCases: [MKDevice.RetouchToolType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum Tools : Swift.String, Swift.CaseIterable {
  case reshape, retouch, filters, adjust, crop, transform, layers
  public init?(rawValue: Swift.String)
  public typealias AllCases = [MKDevice.Tools]
  public typealias RawValue = Swift.String
  public static var allCases: [MKDevice.Tools] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class MTLSegment {
  public var eraseTexture: Metal.MTLTexture!
  public var first_fragState: Metal.MTLRenderPipelineState
  public var second_fragState: Metal.MTLRenderPipelineState
  @objc deinit
}
public class PhotoEditorTools : Foundation.ObservableObject {
  public init()
  public func resetValues()
  @objc deinit
  public func exportImage(_ comp: (UIKit.UIImage) -> Swift.Void)
  public var toolMain: MKDevice.Tools {
    get
    set(newVal)
  }
  public var getLayer: QuartzCore.CALayer? {
    get
  }
  public var getTexture: Metal.MTLTexture? {
    get
  }
  public var reshapeTool: MKDevice.ReshapeToolType {
    get
    set(newVal)
  }
  public var retouchTool: MKDevice.RetouchToolType {
    get
    set(newVal)
  }
  public var useReshape: Swift.Bool {
    get
    set(newVal)
  }
  public var debugMode: Swift.Bool {
    get
    set(newVal)
  }
  public var erase: Swift.Bool {
    get
    set(newVal)
  }
  public var uniforms: MKDevice.UBuffer {
    get
    set(newVal)
  }
  public func setImage(uiimage: UIKit.UIImage)
  public func updateView()
  public var mView: MetalKit.MTKView {
    get
    set(newVal)
  }
  public func draw()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
extension MKDevice.ReshapeToolType : Swift.Equatable {}
extension MKDevice.ReshapeToolType : Swift.Hashable {}
extension MKDevice.ReshapeToolType : Swift.RawRepresentable {}
extension MKDevice.RetouchToolType : Swift.Equatable {}
extension MKDevice.RetouchToolType : Swift.Hashable {}
extension MKDevice.RetouchToolType : Swift.RawRepresentable {}
extension MKDevice.Tools : Swift.Equatable {}
extension MKDevice.Tools : Swift.Hashable {}
extension MKDevice.Tools : Swift.RawRepresentable {}
