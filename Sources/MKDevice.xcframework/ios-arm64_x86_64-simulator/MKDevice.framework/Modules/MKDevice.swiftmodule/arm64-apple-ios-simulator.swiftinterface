// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MKDevice
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Accelerate
import Combine
import Foundation
import MetalKit
import ModelIO
import SceneKit
import Swift
import SwiftUI
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import simd
public struct UBuffer : Swift.Equatable {
  public var pos: simd.float2
  public var pmouse: simd.float2
  public var scale: simd.float2
  public var rotation: Swift.Float
  public var intensity: Swift.Float
  public var topPos: Swift.Float
  public var bottomPos: Swift.Float
  public var leftPos: Swift.Float
  public var rightPos: Swift.Float
  public var res: simd.float2
  public var viewRes: simd.float2
  public var smoothness: Swift.Float
  public var selected: Swift.Bool
  public var deviceScale: Swift.Float
  public static func == (a: MKDevice.UBuffer, b: MKDevice.UBuffer) -> Swift.Bool
}
public class BodyTools : Foundation.ObservableObject {
  public init()
  public func resetValues()
  @objc deinit
  public func exportImage(_ comp: (UIKit.UIImage) -> Swift.Void)
  public var index: Swift.Int {
    get
    set(newVal)
  }
  public var useReshape: Swift.Bool {
    get
    set(newVal)
  }
  public var debugMode: Swift.Bool {
    get
    set(newVal)
  }
  public var uniforms: MKDevice.UBuffer {
    get
    set(newVal)
  }
  public func setImage(uiimage: UIKit.UIImage)
  public func updateView()
  public func swap()
  public var mView: MetalKit.MTKView {
    get
    set(newVal)
  }
  public func draw()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
public struct PPState {
}
public struct Buffer {
}
public struct Byte {
}
extension Swift.SIMD2 where Scalar == Swift.Float {
  public func convertToPosCoord() -> simd.float2
}
extension Swift.SIMD2 where Scalar == Swift.Float {
  public func convertToTexCoord() -> simd.float2
}
extension Metal.MTLRenderCommandEncoder {
  public func setVertexValue<T>(_ value: T, at index: Swift.Int)
  public func setVertexValue<T>(_ value: [T], at index: Swift.Int)
  public func setFragmentValue<T>(_ value: T, at index: Swift.Int)
  public func setFragmentValue<T>(_ value: [T], at index: Swift.Int)
  public func setVertexTextures(_ textures: [Metal.MTLTexture?], startingAt startIndex: Swift.Int = 0)
  public func setVertexTextures(_ textures: Metal.MTLTexture?..., startingAt startIndex: Swift.Int = 0)
  public func setFragmentTextures(_ textures: [Metal.MTLTexture?], startingAt startIndex: Swift.Int = 0)
}
extension UIKit.UIColor {
  public static let green_l: UIKit.UIColor
  public static let green_d: UIKit.UIColor
}
extension UIKit.UIColor {
  public var r: Swift.Double {
    get
  }
  public var g: Swift.Double {
    get
  }
  public var b: Swift.Double {
    get
  }
  public var a: Swift.Double {
    get
  }
}
extension Metal.MTLTexture {
  public var cgImage: CoreGraphics.CGImage? {
    get
  }
}
extension Metal.MTLTexture {
  public var size: CoreFoundation.CGSize {
    get
  }
}
