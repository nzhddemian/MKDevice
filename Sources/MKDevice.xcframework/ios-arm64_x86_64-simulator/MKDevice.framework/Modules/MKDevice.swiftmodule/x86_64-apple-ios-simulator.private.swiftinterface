// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MKDevice
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Accelerate
import Foundation
import MetalKit
import ModelIO
import SceneKit
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import simd
public class MetalViewModel : Foundation.ObservableObject {
  public init()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct VertexData {
}
public struct PPState {
}
public struct Buffer {
}
public struct Byte {
}
@_hasMissingDesignatedInitializers public class MDevice {
  @objc deinit
  public func loadModel(assetUrl: Foundation.URL)
}
extension Swift.SIMD2 where Scalar == Swift.Float {
  public func convertCoord() -> simd.float2
}
extension Metal.MTLRenderCommandEncoder {
  public func setVertexValue<T>(_ value: T, at index: Swift.Int)
  public func setVertexValue<T>(_ value: [T], at index: Swift.Int)
  public func setFragmentValue<T>(_ value: T, at index: Swift.Int)
  public func setFragmentValue<T>(_ value: [T], at index: Swift.Int)
  public func setVertexTextures(_ textures: [Metal.MTLTexture?], startingAt startIndex: Swift.Int = 0)
  public func setVertexTextures(_ textures: Metal.MTLTexture?..., startingAt startIndex: Swift.Int = 0)
  public func setFragmentTextures(_ textures: [Metal.MTLTexture?], startingAt startIndex: Swift.Int = 0)
}
extension UIKit.UIColor {
  public static let green_l: UIKit.UIColor
  public static let green_d: UIKit.UIColor
}
extension UIKit.UIColor {
  public var r: Swift.Double {
    get
  }
  public var g: Swift.Double {
    get
  }
  public var b: Swift.Double {
    get
  }
  public var a: Swift.Double {
    get
  }
}
extension Metal.MTLTexture {
  public var cgImage: CoreGraphics.CGImage? {
    get
  }
}
